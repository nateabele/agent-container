#!/bin/bash
# Initialize a new project with agent container configuration

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get script directory and agent container root
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
AGENT_CONTAINER_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to show usage
show_usage() {
    echo "Usage: $0"
    echo ""
    echo "This script initializes the current directory with agent container configuration."
    echo "It uses the current directory name as the project name and pwd as the project path."
    echo ""
    echo "Example:"
    echo "  cd /Users/nate/Projects/my-project"
    echo "  $0"
    exit 1
}

# Use current directory as project path and basename as project name
PROJECT_PATH="$(pwd)"
PROJECT_NAME="$(basename "$PROJECT_PATH")"

# Validate project name (basic validation)
if [[ ! "$PROJECT_NAME" =~ ^[a-zA-Z0-9_-]+$ ]]; then
    print_error "Project name must contain only letters, numbers, underscores, and hyphens"
    exit 1
fi

# Validate project path
if [ ! -d "$PROJECT_PATH" ]; then
    print_error "Project directory does not exist: $PROJECT_PATH"
    exit 1
fi

# Check if project directory is writable
if [ ! -w "$PROJECT_PATH" ]; then
    print_error "Project directory is not writable: $PROJECT_PATH"
    exit 1
fi

# Check if docker-compose.yml already exists
if [ -f "$PROJECT_PATH/docker-compose.yml" ]; then
    print_warning "docker-compose.yml already exists in $PROJECT_PATH"
    read -p "Overwrite? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_status "Aborted"
        exit 0
    fi
fi

# Check if .env already exists
if [ -f "$PROJECT_PATH/.env" ]; then
    print_warning ".env already exists in $PROJECT_PATH"
    read -p "Overwrite? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_status "Aborted"
        exit 0
    fi
fi

print_status "Initializing project '$PROJECT_NAME' in '$PROJECT_PATH'"

# Create project-specific log directory in agent-container
PROJECT_LOG_DIR="$AGENT_CONTAINER_ROOT/logs/$PROJECT_NAME"
if [ ! -d "$PROJECT_LOG_DIR" ]; then
    mkdir -p "$PROJECT_LOG_DIR"
    print_success "Created project log directory: $PROJECT_LOG_DIR"
else
    print_status "Project log directory already exists: $PROJECT_LOG_DIR"
fi

# Create session directory in project for persistent /home/dev
SESSION_DIR="$PROJECT_PATH/session"
if [ ! -d "$SESSION_DIR" ]; then
    mkdir -p "$SESSION_DIR"
    print_success "Created session directory: $SESSION_DIR"
else
    print_status "Session directory already exists: $SESSION_DIR"
fi

# Detect user ID and group ID
USER_ID=$(id -u)
GROUP_ID=$(id -g)
print_status "Detected user ID: $USER_ID, group ID: $GROUP_ID"

# Detect common ports in use
detect_port() {
    local port=$1
    if lsof -i :$port >/dev/null 2>&1; then
        echo $((port + 1000))
    else
        echo $port
    fi
}

PORT_3000=$(detect_port 3000)
PORT_3001=$(detect_port 3001)
PORT_5173=$(detect_port 5173)
PORT_9222=$(detect_port 9222)

print_status "Detected available ports: 3000->$PORT_3000, 3001->$PORT_3001, 5173->$PORT_5173, 9222->$PORT_9222"

# Read CLAUDE_CODE_OAUTH_TOKEN from agent container .env
CLAUDE_TOKEN=""
if [ -f "$AGENT_CONTAINER_ROOT/.env" ]; then
    CLAUDE_TOKEN=$(grep "^CLAUDE_CODE_OAUTH_TOKEN=" "$AGENT_CONTAINER_ROOT/.env" | cut -d '=' -f2- | tr -d '\n')
    if [ -n "$CLAUDE_TOKEN" ]; then
        print_success "Found CLAUDE_CODE_OAUTH_TOKEN in agent container .env"
    else
        print_warning "CLAUDE_CODE_OAUTH_TOKEN not found in $AGENT_CONTAINER_ROOT/.env"
    fi
else
    print_warning "Agent container .env file not found at $AGENT_CONTAINER_ROOT/.env"
fi

# Copy template files
print_status "Copying template files..."

# Copy docker-compose.yml
cp "$AGENT_CONTAINER_ROOT/template/docker-compose.yml" "$PROJECT_PATH/docker-compose.yml"
print_success "Created docker-compose.yml"

# Create .env file
cat > "$PROJECT_PATH/.env" << EOF
# Agent Container Configuration
# Generated by init-project.sh on $(date)

# Claude Code OAuth Token (copied from agent container)
CLAUDE_CODE_OAUTH_TOKEN=$CLAUDE_TOKEN

# Path to the agent container repository
AGENT_CONTAINER_PATH=$AGENT_CONTAINER_ROOT

# Project name (used for workspace directory)
PROJECT_NAME=$PROJECT_NAME

# Project-specific log directory
PROJECT_LOG_DIR=$PROJECT_LOG_DIR

# User ID and Group ID
AGENT_UID=$USER_ID
AGENT_GID=$GROUP_ID

# Project-specific ports
PROJECT_PORT_3000=$PORT_3000
PROJECT_PORT_3001=$PORT_3001
PROJECT_PORT_5173=$PORT_5173
PROJECT_PORT_9222=$PORT_9222

# Additional project-specific environment variables
# DATABASE_URL=postgresql://user:pass@localhost:5432/mydb
# API_KEY=your-api-key-here
EOF
print_success "Created .env"

# Copy README if it doesn't exist
if [ ! -f "$PROJECT_PATH/README.md" ]; then
    cp "$AGENT_CONTAINER_ROOT/template/README.md" "$PROJECT_PATH/README.md"
    print_success "Created README.md"
else
    print_warning "README.md already exists, skipping"
fi

# Create .gitignore entry if .gitignore exists
if [ -f "$PROJECT_PATH/.gitignore" ]; then
    if ! grep -q "\.env" "$PROJECT_PATH/.gitignore"; then
        echo "" >> "$PROJECT_PATH/.gitignore"
        echo "# Agent container environment" >> "$PROJECT_PATH/.gitignore"
        echo ".env" >> "$PROJECT_PATH/.gitignore"
        echo "session/" >> "$PROJECT_PATH/.gitignore"
        print_success "Added .env and session/ to .gitignore"
    elif ! grep -q "session/" "$PROJECT_PATH/.gitignore"; then
        echo "session/" >> "$PROJECT_PATH/.gitignore"
        print_success "Added session/ to .gitignore"
    fi
else
    print_warning "No .gitignore found - consider adding .env and session/ to version control exclusions"
fi

print_success "Project initialization complete!"
echo ""
print_status "Next steps:"
echo "  1. cd $PROJECT_PATH"
echo "  2. docker compose build"
echo "  3. docker compose run --rm agent"
echo ""
print_status "To update the container later:"
echo "  1. cd $SCRIPT_DIR && git pull"
echo "  2. cd $PROJECT_PATH && docker compose build"
echo ""
print_status "Configuration files:"
echo "  - $PROJECT_PATH/docker-compose.yml (extends base config)"
echo "  - $PROJECT_PATH/.env (project-specific settings)"
echo "  - $PROJECT_PATH/README.md (quick start guide)"
